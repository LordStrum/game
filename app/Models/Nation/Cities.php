<?php

namespace App\Models\Nation;

use App\Models\BuildingTypes;
use App\Models\Properties;
use Illuminate\Database\Eloquent\Model;
use Auth;

class Cities extends Model
{
    public $properties = [];
    protected $appends = ['properties'];

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'nation_id',
    ];

    /**
     * Relationship between the nation and the city
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function nation() : \Illuminate\Database\Eloquent\Relations\BelongsTo
    {
        return $this->belongsTo('App\Models\Nation\Nations');
    }

    /**
     * City/Jobs relationship
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function jobs() : \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany('App\Models\Jobs', 'city_id');
    }

    /**
     * Relationship between the city and it's buildings
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function buildings()
    {
        return $this->hasMany('\App\Models\Nation\Building', 'city_id');
    }

    /**
     * Determines if the user viewing the city owns the city
     *
     * @return bool
     */
    public function isOwner() : bool
    {
       return Auth::user()->nation->id === $this->nation_id;
    }

    public function checkIfOpenBuildingSlots() : bool
    {
        // TODO implement more than one building slots

        $activeSlots = $this->countActiveJobs();

        if ($activeSlots > 0)
            return false;
        else
            return true;
    }

    public function countActiveJobs() : int
    {
        return $this->jobs()->where("status", "active")->count();
    }

    /**
     * Returns information about a building by searching for the building ID
     * If the city doesn't have that building, it returns an empty array
     *
     * @param int $buildingID
     * @return mixed
     */
    public function getBuilding(int $buildingID)
    {
        return $this->buildings->where("building_id", $buildingID);
    }

    /**
     * Loads the "full city"
     *
     * Includes the city's buildings, those building types, and the effects for that building
     */
    public function loadFullCity()
    {
        $this->load('buildings.buildingType.effects.property');
        // Get all of the properties
        $properties = Properties::all();
        foreach ($properties as $prop) // Sort the properties how I want them
        {
            $this->properties[$prop->name] = [
                "id" => $prop->id,
                "higherIsBetter" => $prop->higherIsBetter,
                "isOutOf100" => $prop->isOutOf100,
                "maxPoints" => $this->population * $prop->pointsPerPerson,
                "points" => 0, // Would be calculated later
                "value" => 0.00
            ];
        }
    }

    public function getPropertiesAttribute()
    {
        return $this->properties;
    }

    /**
     * Calculate the values of the properties of the city.
     *
     * Loops over all buildings and their effects and then adds whatever that effect's points are to the property
     * and then loops over every property and calculates a value.
     */
    public function calcStats()
    {
        foreach ($this->buildings as $building)
        {
            foreach ($building->buildingType->effects as $effect)
            {
                $e = $effect->toArray(); // For some reason I can't use $effect properly, so we'll convert it to array for now
                // Add the points generated by these buildings to the property points
                $this->properties[$e["property"]["name"]]["points"] += $effect->affect * $building->quantity; // TODO try to clean this up one day
            }
        }

        // Now calculate the value of the property
        foreach ($this->properties as $k => $property)
        {
            $value = @(round(($property["points"] / $property["maxPoints"]) * 100, 2));
            if (!$property["higherIsBetter"] && $property["isOutOf100"])
                $value = 100 - $value;
            if ($value > 100)
                $value = 100;
            else if ($value < 0)
                $value = 0;
            else if (is_nan($value) || is_infinite($value))
                $value = 0;

            $this->properties[$k]["value"] = $value;
        }
    }
}
